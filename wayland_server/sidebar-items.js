initSidebarItems({"enum":[["EventResult","Possible outcome of the call of a event on a resource"],["Liveness","Represents the state of liveness of a wayland object"],["RegisterStatus","Status of a registration attempt of a resource."]],"fn":[["create_display","Create a new display"],["resource_is_registered","Checks if a resource is registered with a given handler on an event loop"]],"macro":[["declare_delegating_handler","Registers a handler type so it as delegating to one of its fields"],["declare_handler","Registers a handler type so it can be used in event loops"],["server_declare_delegating_handler","Synonym of the declare_delegating_handler! macro."],["server_declare_handler","Synonym of the declare_handler! macro."]],"mod":[["protocol","The wayland core protocol"],["protocol_interfaces","Interfaces for the core protocol"],["sources","Secondary event sources"],["sys","Reexports of types and objects from wayland-sys"]],"struct":[["Client","A wayland client connected to your server"],["Display","A wayland socket"],["EventLoop",""],["EventLoopHandle","Handle to an event loop"],["Global","A handle to a global object"],["StateGuard","Guard to access internal state of an event loop"]],"trait":[["Destroy","A trait to handle destruction of ressources."],["GlobalHandler","Trait to handle a global object."],["Handler","Generic handler trait"],["Init","A trait to initialize handlers after they've been inserted in an event queue"],["Resource","Common routines for wayland resource objects."]]});